# 两个主库，两个从库，每个从库对应起数字的主库
spring.shardingsphere.datasource.names=master0,master1,slave0,slave1
# 两个主库数据源配置
spring.shardingsphere.datasource.master0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.master0.url=jdbc:mysql://192.168.56.102:3306/m_s_demo0?characterEncoding=utf-8
spring.shardingsphere.datasource.master0.username=root
spring.shardingsphere.datasource.master0.password=

spring.shardingsphere.datasource.master1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.master1.url=jdbc:mysql://192.168.56.102:3306/m_s_demo1?characterEncoding=utf-8
spring.shardingsphere.datasource.master1.username=root
spring.shardingsphere.datasource.master1.password=

# 两个从库数据源配置
spring.shardingsphere.datasource.slave0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.slave0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.slave0.url=jdbc:mysql://192.168.56.101:3306/m_s_demo0?characterEncoding=utf-8
spring.shardingsphere.datasource.slave0.username=root
spring.shardingsphere.datasource.slave0.password=

spring.shardingsphere.datasource.slave1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.slave1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.slave1.url=jdbc:mysql://192.168.56.101:3306/m_s_demo1?characterEncoding=utf-8
spring.shardingsphere.datasource.slave1.username=root
spring.shardingsphere.datasource.slave1.password=

# 分表, 这里是数据库里的实际表名称
spring.shardingsphere.sharding.tables.user.actual-data-nodes=m_s_demo$->{0..1}.user_$->{0..1}

# inline
# 分表的字段（user 表）,通过 id 分
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
# 分表策略，这是直接简单点取模
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{id % 2}
# 这里自动生成主键的，我项目中没用到
spring.shardingsphere.sharding.tables.user.key-generator.column=id
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
# 路由数据应该到哪个库中，grovy 表达式的 '/' 会是浮点数，得用 intdiv 来计算
spring.shardingsphere.sharding.tables.user.database-strategy.inline.algorithm-expression=m_s_demo$->{id.intdiv(2) % 2}
spring.shardingsphere.sharding.tables.user.database-strategy.inline.sharding-column=id

# 从库负载均衡算法：round_rabin 轮询，random 随机
# 主从分离配置, 每个数据库对应在哪个主从中
spring.shardingsphere.sharding.master-slave-rules.m_s_demo0.master-data-source-name=master0
spring.shardingsphere.sharding.master-slave-rules.m_s_demo0.slave-data-source-names=slave0

spring.shardingsphere.sharding.master-slave-rules.m_s_demo1.master-data-source-name=master1
spring.shardingsphere.sharding.master-slave-rules.m_s_demo1.slave-data-source-names=slave1

# 配置默认的标准分库，写了第一个第二个就必填，否则会 nullPointException
#spring.shardingsphere.sharding.default-database-strategy.standard.sharding-column=id
#spring.shardingsphere.sharding.default-database-strategy.standard.precise-algorithm-class-name=
# log 打印 sql
spring.shardingsphere.props.sql.show=true